---
title: "Stats 506 Assignment 2"
format: pdf
editor: visual
---

## Problem 1

### a.

#### version 1

```{r}
# Version 1: Implement this game using a loop over the die rolls.
play_dice_v1 <- function(num_rolls, custom_rolls = NULL) {
  winnings <- 0
  if (is.null(custom_rolls)) {
    rolls <- sample(1:6, num_rolls, replace = TRUE)
  } else {
    rolls <- custom_rolls
  }
  for (j in rolls) {
    if (j %% 2 == 0) {
      winnings <- winnings + j - 2
    } else {
      winnings <- winnings - 2
    }
  }
  return(winnings)
}
```

#### version 2

```{r}
# Version 2: Implement this game using built-in R vectorized functions.
play_dice_v2 <- function(num_rolls, custom_rolls = NULL) {
  if (is.null(custom_rolls)) {
    rolls <- sample(1:6, num_rolls, replace = TRUE)
  } else {
    rolls <- custom_rolls
  }
  even_rolls <- rolls[rolls %% 2 == 0]
  odd_rolls <- rolls[rolls %% 2 == 1]
  winnings <- sum(even_rolls) - 2*num_rolls
  return(winnings)
}
```

#### version 3

```{r}
# Version 3: Implement this by collapsing the die rolls into a single table().
play_dice_v3 <- function(num_rolls, custom_rolls = NULL) {
  if (is.null(custom_rolls)) {
    rolls <- sample(1:6, num_rolls, replace = TRUE)
  } else {
    rolls <- custom_rolls
  }
  rollss <- table(rolls)
  even_numbers <- seq(2, 6, by = 2)
  even_frequencies <- rollss[as.character(even_numbers)]
  result_table <- matrix(0, nrow = 2, ncol = length(even_numbers))
  colnames(result_table) <- even_numbers
  rownames(result_table) <- c("Even Number", "Frequency")
  result_table[1, ] <- even_numbers
  result_table[2, ] <- replace(even_frequencies, is.na(even_frequencies), 0)
  m = result_table[2, ] * c(2, 4, 6)
  sum1 = sum(m)
  winnings <- sum1 - num_rolls * 2
  return(winnings)
}
```

#### version 4

```{r}
# Version 4: Implement this game by using one of the “apply” functions.
play_dice_v4 <- function(num_rolls, custom_rolls = NULL) {
  if (is.null(custom_rolls)) {
    rolls <- sample(1:6, num_rolls, replace = TRUE)
  } else {
    rolls <- custom_rolls
  }
  winnings <- sum(sapply(rolls, function(roll) if (roll %% 2 == 0) (roll-2) else -2))
  return(winnings)
}
```

### b.

```{r}
play_dice_v1(3)
play_dice_v2(3)
play_dice_v3(3)
play_dice_v4(3)

play_dice_v1(3000)
play_dice_v2(3000)
play_dice_v3(3000)
play_dice_v4(3000)
```

### c.

```{r}
m = sample(1:6, 3, replace = TRUE)
play_dice_v1(3, custom_rolls=m)
play_dice_v2(3, custom_rolls=m)
play_dice_v3(3, custom_rolls=m)
play_dice_v4(3, custom_rolls=m)
n = sample(1:6, 3000, replace = TRUE)
play_dice_v1(3000, custom_rolls=n)
play_dice_v2(3000, custom_rolls=n)
play_dice_v3(3000, custom_rolls=n)
play_dice_v4(3000, custom_rolls=n)
```

### d.

```{r}
library(microbenchmark)
```

```{r}
# Benchmarking with low input (100)
results_low_input <- microbenchmark(
  v1 = play_dice_v1(100),
  v2 = play_dice_v2(100),
  v3 = play_dice_v3(100),
  v4 = play_dice_v4(100),
  times = 1000  
)

# Benchmarking with large input (10000)
results_large_input <- microbenchmark(
  v1 = play_dice_v1(10000),
  v2 = play_dice_v2(10000),
  v3 = play_dice_v3(10000),
  v4 = play_dice_v4(10000),
  times = 1000  
)

print(results_low_input)
print(results_large_input)

```

When the input is 100, which is low input, v2 has minimum min, lq, mean, median, uq running time. Compared with v3 and v4, the mean running time of v2 is much quicker with 33.47 microseconds. v3 runs most slow in these 4 methods.

When the input is 1000, which is large input, v2 also has minimum min, lq, mean, median, uq running time. Compared with other methods, the mean running time of v2 is much quicker with 1.47 milliseconds. v4 runs most slow in these 4 methods.

### e.

```{r}
simulate_game <- function(num_simulations, num_rolls) {
  results <- replicate(num_simulations, play_dice_v1(num_rolls))
  mean_winnings <- mean(results)
  return(mean_winnings)
}

num_simulations <- 10000
num_rolls <- 100

expected_value <- simulate_game(num_simulations, num_rolls)
cat("Expected value after", num_simulations, "simulations with", num_rolls, "rolls:", expected_value, "\n")

```

As we can see from the result, after 10,000 tests with each test rolls 100 times dice, the expected value is 0.0146, which is close to 0. This means the game is a fair game.

## Problem 2

### a.

```{r}
car <- read.csv("cars.csv")
colnames(car)[colnames(car) == "Dimensions.Height"] <- "height"
colnames(car)[colnames(car) == "Dimensions.Length"] <- "length"
colnames(car)[colnames(car) == "Dimensions.Width"] <- "width"
colnames(car)[colnames(car) == "Engine.Information.Driveline"] <- "driveline"
colnames(car)[colnames(car) == "Engine.Information.Engine.Type"] <- "engine_type"
colnames(car)[colnames(car) == "Engine.Information.Hybrid"] <- "engine_hybrid"
colnames(car)[colnames(car) == "Engine.Information.Number.of.Forward.Gears"] <- "forward_gears"
colnames(car)[colnames(car) == "Engine.Information.Transmission"] <- "transmission"
colnames(car)[colnames(car) == "Fuel.Information.City.mpg"] <- "city_mpg"
colnames(car)[colnames(car) == "Fuel.Information.Fuel.Type"] <- "fuel_type"
colnames(car)[colnames(car) == "Fuel.Information.Highway.mpg"] <- "highway_mpg"
colnames(car)[colnames(car) == "Identification.Classification"] <- "classification"
colnames(car)[colnames(car) == "Identification.ID"] <- "id"
colnames(car)[colnames(car) == "Identification.Make"] <- "maker"
colnames(car)[colnames(car) == "Identification.Model Year"] <- "model_year"
colnames(car)[colnames(car) == "Identification.Year"] <- "release_year"
colnames(car)[colnames(car) == "Engine.Information.Engine.Statistics.Horsepower"] <- "horsepower"
colnames(car)[colnames(car) == "Engine.Information.Engine.Statistics.Torque"] <- "torque"
```

### b.

```{r}
car <- car[car$fuel_type == "Gasoline", ]
```

### c.

```{r}
library(dplyr)
```

```{r}
model <- lm(highway_mpg ~ horsepower + torque + length + width + height + as.factor(release_year), data = car)
summary(model)
```

As we can see from the result. Horsepower has positive relationship with highway mpg, for a one-unit increase in horsepower, the highway mpg increases by 0.016. This indicates that the relationship between horsepower and highway mpg is very weak. For other control variables, length, height, release at 2011 and release at 2012 have positive relationship with highway mpg. While torque, width and release at 2010 have negative relationship with highway mpg. Among all the variables, release at 2010 and release at 2012 have strong relationship with highway mpg with release at 2010 is -0.45 and release at 2012 is 1.3.

### d.

```{r}
library(graphics)
```

```{r}
summary(car$torque)
```

```{r}
frequ <- table(car$torque)
top_frequ <- head(sort(frequ, decreasing = TRUE), 20)
top_frequ
```

Selected Torque values are 128, 270, 424, which is close to the min, mean(median) and max values of Torque and at the same time, have large frequency appeared in the dataset, which can provide enough data for the plot.

```{r}
car2 <- car[car$torque %in% c(128,270,424),]
```

```{r}
summary(car$horsepower)
```

```{r}
#install.packages("emmeans")
library("emmeans")
```

```{r}
car2$torque <- factor(car2$torque)
model_interaction <- lm(highway_mpg ~ horsepower + torque + length + width + height + as.factor(release_year) + horsepower * torque, data = car2)
emmip(model_interaction, torque ~ horsepower, at = list(horsepower = 150:350))
```

As we can see from the plot, when torque increases, the increasing rate of highway mpg decreases from positive to negative when horsepower increases. When torque is small, the highway mpg increase quickly as horsepower increases. As torque increases, highway mpg increase more slowly and finally decrease when horsepower increases.

### e.

```{r}
form <- highway_mpg ~ length + width + height + as.factor(release_year) + horsepower * torque
X = model.matrix(form, data = car)
y <- car$highway_mpg
beta <- solve(t(X) %*% X) %*% t(X) %*% y
beta
```

```{r}
model2 <- lm(highway_mpg ~ length + width + height + as.factor(release_year) + horsepower * torque, data = car)
summary(model2)
```

As we can see from the result, the value of beta calculating manualy is same as using lm model.

## Problem 3

### a.

``` stata
. rename dimensionsheight height

. rename dimensionslength length

. rename dimensionswidth width

. rename engineinformationdriveline driveline

. rename engineinformationenginetype enginetype

. rename engineinformationhybrid enginehybrid

. rename engineinformationnumberofforward gear

. rename engineinformationtransmission transmission

. rename fuelinformationcitympg citympg

. rename fuelinformationfueltype fueltype

. rename fuelinformationhighwaympg highwaympg

. rename identificationclassification classification

. rename identificationid id

. rename identificationmake maker

. rename identificationmodelyear modelyear

. rename identificationyear releaseyear

. rename engineinformationenginestatistic horsepower

. rename v18 torque
```

### b.

``` stata
. keep if fueltype == "Gasoline"
(485 observations deleted)
```

### c.

``` stata
. reg highwaympg horsepower torque length width height i.releaseyear

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(8, 4582)      =    413.35
       Model |  70043.6695         8  8755.45869   Prob > F        =    0.0000
    Residual |   97055.298     4,582  21.1818634   R-squared       =    0.4192
-------------+----------------------------------   Adj R-squared   =    0.4182
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.6024

------------------------------------------------------------------------------
  highwaympg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
  horsepower |   .0163556   .0022772     7.18   0.000     .0118913      .02082
      torque |  -.0507425    .002203   -23.03   0.000    -.0550614   -.0464236
      length |    .001729   .0008836     1.96   0.050    -3.36e-06    .0034613
       width |  -.0003343   .0009045    -0.37   0.712    -.0021075    .0014388
      height |   .0099079   .0011267     8.79   0.000      .007699    .0121168
             |
 releaseyear |
       2010  |  -.4539681   .6768246    -0.67   0.502     -1.78087    .8729342
       2011  |   .1711016   .6757043     0.25   0.800    -1.153604    1.495808
       2012  |   1.302928   .6810076     1.91   0.056    -.0321751    2.638031
             |
       _cons |   32.29266   .7225982    44.69   0.000     30.87602     33.7093
------------------------------------------------------------------------------
```

As we can see from the result. Horsepower has positive relationship with highway mpg, for a one-unit increase in horsepower, the highway mpg increases by 0.016. This indicates that the relationship between horsepower and highway mpg is very weak. For other control variables, length, height, release at 2011 and release at 2012 have positive relationship with highway mpg. While torque, width and release at 2010 have negative relationship with highway mpg. Among all the variables, release at 2010 and release at 2012 have strong relationship with highway mpg with release at 2010 is -0.45 and release at 2012 is 1.3.

### d.

``` stata
. regress highwaympg c.horsepower##c.torque length width height i.releaseyear

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(9, 4581)      =    480.07
       Model |  81105.8715         9  9011.76351   Prob > F        =    0.0000
    Residual |   85993.096     4,581  18.7716865   R-squared       =    0.4854
-------------+----------------------------------   Adj R-squared   =    0.4844
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.3326

---------------------------------------------------------------------------------------
           highwaympg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
----------------------+----------------------------------------------------------------
           horsepower |  -.0166633   .0025388    -6.56   0.000    -.0216406    -.011686
               torque |  -.0860593   .0025333   -33.97   0.000    -.0910257   -.0810928
                      |
c.horsepower#c.torque |   .0001124   4.63e-06    24.28   0.000     .0001033    .0001214
                      |
               length |   .0017767   .0008318     2.14   0.033     .0001459    .0034075
                width |  -.0011694   .0008521    -1.37   0.170      -.00284    .0005011
               height |   .0065604   .0010696     6.13   0.000     .0044634    .0086573
                      |
          releaseyear |
                2010  |  -.5627858   .6371716    -0.88   0.377    -1.811949    .6863777
                2011  |   .0725356   .6361142     0.11   0.909    -1.174555    1.319626
                2012  |   1.197033   .6411085     1.87   0.062    -.0598488    2.453915
                      |
                _cons |   42.18795   .7930274    53.20   0.000     40.63323    43.74266
---------------------------------------------------------------------------------------
. keep if inlist(torque, 128, 270, 424)
(4,267 observations deleted)

. margins torque, at(horsepower = (100 200 300 400 500))

Adjusted predictions                                       Number of obs = 324
Model VCE: OLS

Expression: Linear prediction, predict()
1._at: horsepower = 100
2._at: horsepower = 200
3._at: horsepower = 300
4._at: horsepower = 400
5._at: horsepower = 500

------------------------------------------------------------------------------
             |            Delta-method
             |     Margin   std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
  _at#torque |
      1 128  |   28.92305    1.98628    14.56   0.000     25.01514    32.83096
      1 270  |   20.28651   1.499587    13.53   0.000     17.33614    23.23687
      1 424  |     62.625   6.227533    10.06   0.000     50.37263    74.87737
      2 128  |   42.78756   3.358333    12.74   0.000     36.18021    49.39492
      2 270  |   22.25698   .7608299    29.25   0.000     20.76008    23.75387
      2 424  |     51.375   4.364512    11.77   0.000     42.78803    59.96197
      3 128  |   56.65208   8.673365     6.53   0.000     39.58765     73.7165
      3 270  |   24.22745     .19453   124.54   0.000     23.84472    24.61018
      3 424  |     40.125   2.503921    16.02   0.000     35.19866    45.05134
      4 128  |   70.51659   13.99257     5.04   0.000     42.98689    98.04629
      4 270  |   26.19792   .7910134    33.12   0.000     24.64164     27.7542
      4 424  |     28.875   .6664295    43.33   0.000     27.56383    30.18617
      5 128  |    84.3811   19.31249     4.37   0.000      46.3847    122.3775
      5 270  |   28.16839   1.530504    18.40   0.000     25.15719    31.17958
      5 424  |     17.625   1.253989    14.06   0.000     15.15784    20.09216
------------------------------------------------------------------------------

. marginsplot

Variables that uniquely identify margins: horsepower torque

```

![](Graph.png)

As we can see from the plot, when torque increases, the increasing rate of highway mpg decreases from positive to negative when horsepower increases. When torque is small, the highway mpg increase quickly as horsepower increases. As torque increases, highway mpg increase more slowly and finally decrease when horsepower increases.

### e.

``` stata
```
