---
title: "Assignment 5"
format:
  html:
    embed-resources: true
---

## Problem 1

### a.

```{r}
nnmaps <- read.csv("chicago-nmmaps.csv")
```

```{r}
library(ggplot2)
library(dplyr)
```

```{r}
nnmaps$temp_celsius <- (nnmaps$temp - 32) * 5/9

monthly_means <- nnmaps %>%
  group_by(month, season) %>%
  summarise(mean_temp_celsius = mean(temp_celsius))

ggplot(monthly_means, aes(x = month, y = mean_temp_celsius, color = season, group = season)) +
  geom_point() +
  geom_line() +
  scale_x_discrete(limits = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
  labs(title = "Mean Monthly Temperature in Celsius by Season",
       x = "Month",
       y = "Average Temperature (Â°C)",
       color = "Season") +
  theme_minimal()

```

### b.

```{r}
library(tidyr)
nnmaps <- na.omit(nnmaps)
monthly_means_all <- nnmaps %>%
  group_by(month) %>%
  summarise(mean_temp_celsius = mean(temp_celsius),
            mean_o3 = mean(o3),
            mean_pm10 = mean(pm10),
            mean_dewpoint = mean(dewpoint))

monthly_means_all$month <- factor(monthly_means_all$month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
monthly_means_long <- pivot_longer(monthly_means_all, 
                                   cols = c(mean_temp_celsius, mean_o3, mean_pm10,
                                            mean_dewpoint),
                                   names_to = "variable",
                                   values_to = "value")

ggplot(monthly_means_long, aes(x = month, y = value, color = variable, group = variable)) +
  geom_line() +
  labs(title = "Mean Monthly Temperature, O3, PM10, and Dewpoint",
       x = "Month",
       y = "Value",
       color = "Variable") +
  theme_minimal() +
  scale_color_manual(values = c("red", "blue", "green", "purple"))
```

By observing the smoothness of the lines in the plot, it appears that PM10 has the least seasonal variation compared to temperature, O3, and dewpoint. The PM10 line shows less fluctuation throughout the year, indicating less impact of seasonal changes.

## Problem 2

### a.

```{r}
library(methods)

# Define the poly class
setClass("poly", 
         slots = c(coefficients = "numeric", powers = "numeric"))

# Constructor function
make_poly <- function(expression) {
  expression <- gsub(" ", "", expression)
  
  terms <- unlist(regmatches(expression, gregexpr("[-+]?[^-+]+", expression)))
  coefficients <- numeric()
  powers <- numeric()

  for (term in terms) {
    if (grepl("x", term)) {
      if (grepl("x\\^", term)) {
        parts <- strsplit(term, "x\\^")[[1]]
        coeff <- ifelse(parts[1] == "" || parts[1] == "-", paste0(parts[1], "1"), parts[1])
        power <- parts[2]
      } else {
        coeff <- ifelse(grepl("^-x", term) || term == "x", ifelse(term == "x", "1", "-1"), term)
        power <- "1"
      }
    } else {
      coeff <- term
      power <- "0"
    }
    coefficients <- c(coefficients, as.numeric(coeff))
    powers <- c(powers, as.numeric(power))
  }

  new("poly", coefficients = coefficients, powers = powers)
}

# Define the validator
setValidity("poly", function(object) {
  if (length(object@coefficients) != length(object@powers)) {
    return("Coefficients and powers should have the same length")
  }
  TRUE
})

# Show method
setMethod("show", "poly", function(object) {
  sorted_indices <- order(object@powers, decreasing = TRUE)
  sorted_coefficients <- object@coefficients[sorted_indices]
  sorted_powers <- object@powers[sorted_indices]

  terms <- mapply(function(coeff, power) {
    term <- ifelse(power == 0, as.character(coeff),
                   ifelse(power == 1, paste0(coeff, "x"),
                          paste0(coeff, "x^", power)))
    term <- gsub("^1x", "x", term)
    term <- gsub(" -1x", " - x", term)
    term <- gsub("1x", "x", term)
    term
  }, coeff = sorted_coefficients, power = sorted_powers, SIMPLIFY = FALSE)

  polynomial_string <- paste(terms, collapse = " + ")
  polynomial_string <- gsub("\\+ -", "- ", polynomial_string)
  cat("Polynomial: ", polynomial_string, "\n")
})

# Method to add two poly objects
setMethod("+", c("poly", "poly"), function(e1, e2) {
  all_powers <- union(e1@powers, e2@powers)
  result_coefficients <- numeric(length(all_powers))

  for (power in all_powers) {
    coeff1 <- ifelse(power %in% e1@powers, e1@coefficients[which(e1@powers == power)], 0)
    coeff2 <- ifelse(power %in% e2@powers, e2@coefficients[which(e2@powers == power)], 0)
    result_coefficients[which(all_powers == power)] <- coeff1 + coeff2
  }

  new("poly", coefficients = result_coefficients, powers = all_powers)
})

# Method to subtract two poly objects
setMethod("-", c("poly", "poly"), function(e1, e2) {
  all_powers <- union(e1@powers, e2@powers)
  result_coefficients <- numeric(length(all_powers))

  for (power in all_powers) {
    coeff1 <- ifelse(power %in% e1@powers, e1@coefficients[which(e1@powers == power)], 0)
    coeff2 <- ifelse(power %in% e2@powers, e2@coefficients[which(e2@powers == power)], 0)
    result_coefficients[which(all_powers == power)] <- coeff1 - coeff2
  }

  new("poly", coefficients = result_coefficients, powers = all_powers)
})
```

### b.

```{r}
p1 <- make_poly("3x^2 + 2")
p2 <- make_poly("7x^3 - 2x^2 - x + 17")
p1
p2
p1 + p2
p1 - p2
```

## Problem 3

```{r}
library(nycflights13)
library(data.table)
```

### a.

```{r}
flights_dt <- as.data.table(flights)
airports_dt <- as.data.table(airports)

fli_ori_apt <- flights_dt[airports_dt, on = .(origin = faa), nomatch = 0]
dep_delay_dt <- fli_ori_apt[, .(mean_dep_delay = mean(dep_delay, na.rm = TRUE),
                                median_dep_delay = median(dep_delay, na.rm = TRUE), n = .N), 
                            by = .(name)][n >= 10][order(-mean_dep_delay)]

fli_dest_apt <- flights_dt[airports_dt, on = .(dest = faa), nomatch = 0]
arr_delay_dt <- fli_dest_apt[, .(mean_arr_delay = mean(arr_delay, na.rm = TRUE), 
                                 median_arr_delay = median(arr_delay, na.rm = TRUE), n = .N), 
                             by = .(name)][n >= 10][order(-mean_arr_delay)]
print(dep_delay_dt, nrow(dep_delay_dt))
print(arr_delay_dt, nrow(arr_delay_dt))
```

### b.

```{r}
planes_dt <- as.data.table(planes)
flights_dt <- as.data.table(flights)
flights_planes_dt <- flights_dt[planes_dt, on = .(tailnum), nomatch = 0]

speed_dt <- flights_planes_dt[, .(avg_speed = mean(distance / (air_time / 60), na.rm = TRUE)), by = .(model)]

fastest_model <- speed_dt[which.max(avg_speed)]
fastest_model_flights <- flights_planes_dt[model == fastest_model$model, .N]

result_dt <- data.table(model = fastest_model$model, 
                        avg_speed = fastest_model$avg_speed, 
                        n_flights = fastest_model_flights)
print(result_dt)
```
